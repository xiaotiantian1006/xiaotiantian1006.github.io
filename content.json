[{"title":"hahh","date":"2017-04-22T14:49:56.000Z","path":"2017/04/22/hahh/","text":"hahah … dkdkdfsdssdfdf fdfd ECMAScript中有5种简单数据类型（基本数据类型）:Undefined、Null、Boolean、Number和String。还有1种复杂数据类型–Object, Object本质上是由一组无序的名值对组成的。注：在ES6中新增了Symbol。1.typeof操作符 typeof操作符用来检测给定变量的数据类型，可能的返回值： 123456\"undefined\" 这个值未定义\"boolean\" 这个值是布尔值\"string\" 这个值是字符串\"number\" 这个值是数值\"object\" 这个值是对象或null\"function\" 这个值是函数 例子： 123var name='kk';console.log(typeof name); //\"string\"console.log(typeof &#123;&#125;); //\"object\" 2.Undefined类型 undefined类型只有一个值，即特殊的undefined。 如果在使用var声明变量但未对其加以初始化时，这个变量的值就是undefined。 12var name;console.log(name===undefined); //true 对于未声明过的变量，只能执行一项操作，即使用typeof操作符检测其数据类型（对未声明的变量调用delete不会导致错误（在非严格模式下））3.Null类型 null类型也是只有一个值的数据类型，这个值就是null。null值可以看做是一个空对象指针。 1console.log(typeof null); //\"object\" undefined其实是派生自null值： 1console.log(null==undefined); //true 注意：null和undefined没有属性，甚至连toString()这种标准方法都没有。 4.Boolean类型 boolean类型有两个字面值：true和false,两个值是区分大小写的。 要将一个值转换为其对应的boolean值，可以使用转型函数Boolean(); 12var name='kk';console.log(Boolean(name)); //true 可以对任何类型的值调用Boolean函数，而且总会返回一个Boolean值（true或false） 转换规则： 对于true或false，返回原值（true或false） 对于String类型的值，任何非空字符串返回true，空字符串(“”)返回false 对于Number类型的值，任何非零数字值（包括无穷大），返回true；0或NaN返回false 对于Object类型的值，任何对象返回true，null返回false 对于Undefined类型，undefined返回false（只有一个值）5.Number类型 最基本的数值字面量格式是十进制整数。 1var num = 15; 八进制（以8为基数）以0开头，后面是（0~7） 1var num = 070; //八进制的56 十六进制（以16为基数）以0x开头，后面是（0~9及A~F），字母A~F可以大小写。 1var num = 0xA; //十六进制的10 注意：在进行算术计算时，所有以八进制和十六进制表示的数值都会被转换成是十进制。5.1 浮点数值 浮点数值指包含一个小数点，并且小数点后面必须至少有一个数字。 1234567891011121314151617181920 var floatNum = 1.1; ``` **5.2 数值范围** 基于内存的限制，ECMAScript只能保存有限的数值。 ECMAScript能够表示的最小数值保存在Number.MIN_VALUE(最小值)中，这个值是5e-324;能够表示的最大数值保存爱Number.MAX_VALUE(最大值)中，这个值是1.7976931348623157e+308。如果某次计算的结果得到了一个超出JavaScript数值范围的值，那么这个数值就会被转换成特殊的Infinity值；如果这个值是负数，则会被转换为 -Infinity（负无穷），如果这个数值是整数，则会转换成Infinity（正无穷）。 注意：Infinity是不能参与计算的数值。 用isFinite()来判断这个值是否无穷，该函数接受一个参数。如果参数位于最小与最大数值之间，返回true。 ```javascript console.log(isFinite(1)); //true console.log(isFinite(Infinity)); //false ``` **5.3 NaN** NaN(Not a Number)表示非数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。 注意点： - 任何涉及NaN的操作都会返回NaN。 - NaN与任何值都不想等，包括NaN本身。 ```javascript console.log(NaN == NaN); //false 我们可以用isNaN()函数来判断是否非数值，该函数接受一个参数，可以是任何类型。 123456789101112131415161718192021222324252627282930313233343536373839 console.log(isNaN(NaN)); //true ``` isNaN()在接收到一个值(可以是任何类型)之后，会尝试将这个值转换为数值，某些不是数值的值会直接转换为数值，比如：字符串\"10\"或Boolean值。而任何不能被转换为数值的值都会导致这个函数返回true。 ```javascript console.log(isNaN(NaN)); //true console.log(isNaN(10)); //false console.log(isNaN('blue')); // true ``` **5.4 数值转换** 有3个函数可以把非数值转换为数值: Number()、parseInt()和pareFloat() 转型函数Number()可以用于任何数据类型，后面两个是专门用于把字符串转换为数值。 **Number()函数的转换规则**： - 如果是Boolean值，true和false将分别转换为1和0 - 如果是数字值，只是简单的传入和返回 - 如果是null值，返回0 - 如果是undefined，返回NaN - 如果是字符串，遵循下列规则： + 如果是字符串中只包含数字(包括前面带正负号)，则将其转换为十进制数值(前面的0会被忽略) + 如果字符串中包含有效的浮点格式，如1.1，则将其转换为对应的浮点数值 + 如果字符串中包含有效的十六进制，如0xf，则将其转换为相同大小的十进制数值 + 如果字符串是空的，返回0 + 如果字符串中包含上述格式以外的字符，返回NaN - 如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN, 则调用对象的toString()方法，然后再次依照前面的规则转换返回字符串值 ```javascript console.log(Number('kk')); //NaN console.log(Number('')); //0 console.log(Number('000222')); //222 console.log(Number(true)); //1 ``` **parseInt()** parseInt()会忽略字符串前面的空格，直到找到第一个非空格字符。如果第一个字符不是数字字符或负号， 就会返回NaN。如果第一字符是数字字符，就会继续解析，直到解析完所有后续字符或者遇到了一个非数字字符。 parseInt()也能识别八进制(在ECMAScript 5中无法识别，将开头的0当作0)和十六进制，最后会转换成十进制。 ```javascript console.log(parseInt('123kk')); //123 console.log(parseInt('')); //NaN console.log(parseInt('070')); //70 console.log(parseInt('22.5')); //22 还可以为parseInt()提供第二个参数，指定需要转换的进制 12console.log(parseInt('kk')); //NaNconsole.log(parseInt('70',8)); //56 如果提供了第二个参数，要转换八进制和十六进制时，可省略0和0x。 parseFloat()和parseInt()类似，也是从第一个字符(位置0)开始解析每个字符，而且一直解析到字符串末尾，或者解析到遇到一个 无效的浮点数字字符为止，换句话说，字符串中的第一个小数点是有效的，后面的小数点是无效的，它还会忽略前面的零，只会解析十进制值。 123console.log(parseFloat('123kk')); //123console.log(parseFloat('070')); //70console.log(parseFloat('22.5.44')); //22.5 6.String类型 string类型用于表示由零或多个16为Unicode字符组成的字符序列，即字符串。字符串可以由双引号或单引号表示。 1var name = 'kk'; 用双引号表示的字符串和用单引号表示的字符串完全相同，但要确保引号前后一致，也就是说以双引号开头的必须以双引号结尾，以单引号开头的必须以单引号结尾。 6.1 字符字面量 string数据类型包含了一些特殊的字符字面量，也叫转义序列。 123456789\\n 换行\\t 制表\\b 退格\\r 回车\\\\ 斜杠\\' 单引号\\\" 双引号\\xnn 以十六进制代码nn表示的一个字符(其中n为0~F)。例如:\\x41表示\"A\"\\unnnn 以十六进制代码nnnn表示的一个Unicode字符(其中n为0~F)。例如：\\u03a3表示希腊字符Σ 这些字符字面量可以出现在字符串中的任意位置，会被当做一个字符来解析。 123var name = 'kk\\u03a3';console.log(name); //kkΣconsole.log(name.length); //3 任何字符串的长度都可以访问length属性取得。 6.2 字符串的特点 ECMAScript中字符串是不可变的。一旦创建，值就不会改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个 包含新值的字符串填充该变量，例如： 123456789var lang = \"Java\";lang = lang + \"Script\";``` **6.3 转换为字符串** 要将一个值转换为字符串有两种方式： - 使用每个值(null和undefined除外)都有的toString()方法 ```javascriptvar age = 1;console.log(age.toString()); //\"1\" 还可以给toString()传入一个参数，通过传递基数，可以输出二进制、八进制、十六进制。 123456789101112131415161718 var num = 10; console.log(num.toString()); //\"10\" console.log(num.toString(2)); //\"1010\" ``` - 可以使用转型函数String(),能将任何类型的值转换为字符串，转换规则： + 如果有toString()方法，则调用该方法并返回相应的结果 + 如果值是null,则返回null + 如果值是undefined，则返回undefined ```javascript console.log(String(10)); //\"10\" console.log(String(true)); //\"true\" console.log(String(null)); //\"null\" console.log(String(undefined)); //\"undefined\" ``` 要把某个值转为字符串，还可以使用加号操作符： ```javascript console.log(true + ''); //\"true\" 7.Object类型 ECMAScript中的对象其实就是一组数据和功能的集合。 对象可通过执行new操作符后跟创建的对象类型的名称来创建。 1var o = new Object(); 如果不传参，可以省略后面的圆括号(不推荐)。 1var o = new Object; 在ECMAScript中，Object类型是所有对象的基础。Object的每个实例都具有下列属性和方法： constructor: 保存着用于创建当前对象的函数。对于前面的例子而言，构造函数(constructor)就是Object()。 hasOwnPerty(propertyName):用于检查给定的属性在当前对象实例中(而不是在实例的原型中)是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定(例如：o.hasOwnPerty(“name”))。 isPrototypeOf(object):用于检查传入的对象是否是当前对象的原型。 protertyIsEnumerable(propertyName):用于检查给定的属性是否能够使用for-in语句来枚举。与hasOwnPerty()方法一样，作为参数的属性名必须以字符串形式指定。 toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。 toString():返回对象的字符串表示。 valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。","tags":[]},{"title":"测试","date":"2017-04-22T14:26:52.000Z","path":"2017/04/22/测试/","text":"!!!!!!","tags":[]},{"title":"小有成就感","date":"2017-04-08T13:45:15.000Z","path":"2017/04/08/小有成就感/","text":"博客搭建的断断续续的，这期间参考了大量的文章。 作为小白真的要多敲多百度多实践，实践出真理，这话不假。 感谢简书作者邵君晓啦，写的简单明了，很棒！ 慢慢记录我的前端之路吧~","tags":[{"name":"成就感","slug":"成就感","permalink":"http://github.com/xiaotiantian1006/tags/成就感/"},{"name":"开始","slug":"开始","permalink":"http://github.com/xiaotiantian1006/tags/开始/"},{"name":"前端","slug":"前端","permalink":"http://github.com/xiaotiantian1006/tags/前端/"}]},{"title":"Hello world","date":"2017-04-08T12:14:26.000Z","path":"2017/04/08/Hello-world/","text":"测试啊。。","tags":[]}]